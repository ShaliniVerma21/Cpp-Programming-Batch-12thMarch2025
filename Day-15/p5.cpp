/*
Signal handling in C++ is a mechanism that allows a program to respond to asynchronous events (signals) such as 
interrupts, termination requests, or illegal operations. Signals are generated by the operating system or hardware 
and can be handled by defining signal handlersâ€”functions that are executed in response to specific signals.    

Key Concepts:

Signals: Notifications sent to a process to notify it of events like segmentation faults, interrupts, or 
termination requests.

Signal Handlers: Functions that define how a program should respond to a specific signal.

Signal Masking: Temporarily blocking certain signals while a signal handler is executing.

Standard Signals: Common signals include SIGINT (interrupt), SIGTERM (termination), SIGSEGV (segmentation fault), 
and SIGABRT (abort).    
*/

//1. Basic Signal Handling

#include <iostream>
#include <csignal>
#include <cstdlib>

void signalHandler(int signum) {
    std::cout << "Segmentation fault (SIGSEGV) received. Exiting...\n";
    exit(signum);
}

int main() {
    // Register signal handler for segmentation fault
    signal(SIGSEGV, signalHandler);

    // Intentionally cause a segmentation fault
    int *p = nullptr;
    std::cout << "Causing segmentation fault...\n";
    *p = 42; // Dereferencing a null pointer

    return 0;
}
